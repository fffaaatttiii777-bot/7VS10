class MessiRonaldoComparison {
    constructor() {
        this.currentData = {};
        this.charts = {};
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadData('all-time-career'); // Load default data
        this.setupMobileMenu();
    }

    setupEventListeners() {
        // Filter changes
        const categoryFilter = document.getElementById('categoryFilter');
        const yearFilter = document.getElementById('yearFilter');
        const statTypeFilter = document.getElementById('statTypeFilter');

        if (categoryFilter) {
            categoryFilter.addEventListener('change', (e) => {
                console.log('Category changed to:', e.target.value);
                this.loadData(e.target.value);
            });
        }

        if (yearFilter) {
            yearFilter.addEventListener('change', (e) => {
                if (e.target.value !== 'all') {
                    console.log('Year changed to:', e.target.value);
                    this.loadData(e.target.value);
                } else {
                    const currentCategory = categoryFilter ? categoryFilter.value : 'all-time-career';
                    this.loadData(currentCategory);
                }
            });
        }

        if (statTypeFilter) {
            statTypeFilter.addEventListener('change', () => {
                this.filterStats();
            });
        }

        // Export functionality
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportToCSV();
            });
        }
    }

    setupMobileMenu() {
        const navToggle = document.getElementById('navToggle');
        const navMenu = document.querySelector('.nav-menu');

        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
                navToggle.classList.toggle('active');
            });
        }
    }

    loadData(category) {
        console.log('Loading data for category:', category);
        
        if (!messiRonaldoData[category]) {
            console.error(`No data found for category: ${category}`);
            // Fall back to career stats if category not found
            category = 'all-time-career';
        }

        this.currentData = messiRonaldoData[category];
        console.log('Current data loaded:', this.currentData);
        
        this.renderStats();
        this.renderCharts();
    }

    renderStats() {
        const statsGrid = document.getElementById('statsGrid');
        if (!statsGrid) {
            console.error('Stats grid element not found');
            return;
        }

        // Clear existing content
        statsGrid.innerHTML = '';

        if (!this.currentData || !this.currentData.messi || !this.currentData.ronaldo) {
            statsGrid.innerHTML = '<p class="text-center text-red-500">No data available for this selection</p>';
            return;
        }

        const statCategories = [
            {
                title: 'Goals',
                messiValue: this.currentData.messi.goals || 0,
                ronaldoValue: this.currentData.ronaldo.goals || 0,
                type: 'number'
            },
            {
                title: 'Assists',
                messiValue: this.currentData.messi.assists || 0,
                ronaldoValue: this.currentData.ronaldo.assists || 0,
                type: 'number'
            },
            {
                title: 'Appearances',
                messiValue: this.currentData.messi.appearances || 0,
                ronaldoValue: this.currentData.ronaldo.appearances || 0,
                type: 'number'
            },
            {
                title: 'Goals Per Game',
                messiValue: this.currentData.messi.goalsPerGame || 0,
                ronaldoValue: this.currentData.ronaldo.goalsPerGame || 0,
                type: 'decimal'
            },
            {
                title: 'Hat-tricks',
                messiValue: this.currentData.messi.hatTricks || 0,
                ronaldoValue: this.currentData.ronaldo.hatTricks || 0,
                type: 'number'
            },
            {
                title: 'Penalties',
                messiValue: this.currentData.messi.penalties || '0/0',
                ronaldoValue: this.currentData.ronaldo.penalties || '0/0',
                type: 'text'
            },
            {
                title: 'Free Kick Goals',
                messiValue: this.currentData.messi.freeKicks || 0,
                ronaldoValue: this.currentData.ronaldo.freeKicks || 0,
                type: 'number'
            }
        ];

        // Add Man of the Match if available
        if (this.currentData.messi.motm || this.currentData.ronaldo.motm) {
            statCategories.push({
                title: 'Man of the Match',
                messiValue: this.currentData.messi.motm || 0,
                ronaldoValue: this.currentData.ronaldo.motm || 0,
                type: 'number'
            });
        }

        // Add Average Rating if available
        if (this.currentData.messi.avgRating || this.currentData.ronaldo.avgRating) {
            statCategories.push({
                title: 'Average Rating',
                messiValue: this.currentData.messi.avgRating || 0,
                ronaldoValue: this.currentData.ronaldo.avgRating || 0,
                type: 'decimal'
            });
        }

        statCategories.forEach(stat => {
            const statCard = this.createStatCard(stat);
            statsGrid.appendChild(statCard);
        });

        console.log('Stats rendered successfully');
    }

    createStatCard(stat) {
        const card = document.createElement('div');
        card.className = 'stat-card bg-white rounded-lg p-6 shadow-lg';

        const winner = this.determineWinner(stat.messiValue, stat.ronaldoValue);
        
        card.innerHTML = `
            <div class="stat-header text-center mb-4">
                <h3 class="stat-title text-xl font-bold text-gray-800">${stat.title}</h3>
            </div>
            <div class="stat-comparison grid grid-cols-2 gap-4">
                <div class="player-stat messi-stat bg-blue-100 p-4 rounded text-center">
                    ${winner === 'messi' ? '<div class="winner-badge">ðŸ‘‘</div>' : ''}
                    <div class="player-name font-semibold text-blue-700">Messi</div>
                    <div class="stat-value text-2xl font-bold text-blue-800">${this.formatValue(stat.messiValue, stat.type)}</div>
                </div>
                <div class="player-stat ronaldo-stat bg-orange-100 p-4 rounded text-center">
                    ${winner === 'ronaldo' ? '<div class="winner-badge">ðŸ‘‘</div>' : ''}
                    <div class="player-name font-semibold text-orange-700">Ronaldo</div>
                    <div class="stat-value text-2xl font-bold text-orange-800">${this.formatValue(stat.ronaldoValue, stat.type)}</div>
                </div>
            </div>
        `;

        return card;
    }

    determineWinner(messiValue, ronaldoValue) {
        const messiNum = this.extractNumber(messiValue);
        const ronaldoNum = this.extractNumber(ronaldoValue);

        if (messiNum === ronaldoNum) return 'tie';
        return messiNum > ronaldoNum ? 'messi' : 'ronaldo';
    }

    extractNumber(value) {
        if (typeof value === 'number') return value;
        if (typeof value === 'string') {
            // Handle penalty format "24/29"
            if (value.includes('/')) {
                const parts = value.split('/');
                return parseInt(parts[0]) || 0;
            }
            return parseFloat(value) || 0;
        }
        return 0;
    }

    formatValue(value, type) {
        if (type === 'decimal') {
            return typeof value === 'number' ? value.toFixed(2) : value;
        }
        if (type === 'number' && typeof value === 'number') {
            return value.toLocaleString();
        }
        return value;
    }

    renderCharts() {
        // Charts implementation (you can expand this later)
        console.log('Charts would be rendered here');
    }

    filterStats() {
        const filter = document.getElementById('statTypeFilter').value;
        const statCards = document.querySelectorAll('.stat-card');
        
        statCards.forEach(card => {
            const title = card.querySelector('.stat-title').textContent.toLowerCase();
            let show = true;

            switch(filter) {
                case 'goals':
                    show = title.includes('goal') || title.includes('hat-trick');
                    break;
                case 'assists':
                    show = title.includes('assist');
                    break;
                case 'performance':
                    show = title.includes('rating') || title.includes('match') || title.includes('per game');
                    break;
                default:
                    show = true;
            }

            card.style.display = show ? 'block' : 'none';
        });
    }

    exportToCSV() {
        const data = this.currentData;
        let csv = 'Category,Messi,Ronaldo\n';
        
        Object.keys(data.messi).forEach(key => {
            const messiValue = data.messi[key] || 0;
            const ronaldoValue = data.ronaldo[key] || 0;
            csv += `${key},${messiValue},${ronaldoValue}\n`;
        });

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `messi_vs_ronaldo_${new Date().toISOString().split('T')[0]}.csv`;
        a.click();
        window.URL.revokeObjectURL(url);
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing app...');
    new MessiRonaldoComparison();
});
                .stat-card {
    transition: transform 0.3s ease;
    border: 1px solid #e5e7eb;
}

.stat-card:hover {
    transform: translateY(-2px);
}

.winner-badge {
    position: absolute;
    top: -10px;
    right: -10px;
    font-size: 20px;
    background: #f59e0b;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.player-stat {
    position: relative;
}

#statsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.filter-select {
    padding: 10px 15px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    background: white;
    margin: 0 10px;
}

